var searchIndex = JSON.parse('{\
"rs_cord":{"doc":"","t":[3,3,11,11,11,11,12,0,11,0,11,11,12,12,12,14,12,14,11,11,0,0,11,11,0,14,11,11,12,11,11,11,11,11,11,0,11,11,11,11,11,17,4,13,13,6,13,6,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,0,0,0,0,0,18,18,18,18,13,18,18,18,18,18,18,18,18,18,18,18,18,18,18,13,13,13,18,18,13,3,13,18,18,4,18,18,13,13,13,18,18,13,18,18,13,18,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,12,11,11,12,11,12,11,12,11,11,12,11,11,11,11,11,0,0,0,0,6,13,3,3,13,13,13,13,13,13,3,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,12,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,12,12,12,12,12,12,12,12,3,12,12,12,12,12,11,11,12,11,11,12,12,11,12,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,11,11,11,12,12,11,11,12,3,12,11,11,12,11,11,11,12,12,12,11,11,12,11,12,12,12,12,11,11,11,11,11,12,12,11],"n":["Client","ClientState","borrow","borrow","borrow_mut","borrow_mut","client","constants","default","error","from","from","gateway","http","http","impl_created_at","intents","intents","into","into","macros","models","new","new_with_token","prelude","route","start","state","token","try_from","try_from","try_into","try_into","type_id","type_id","types","user","vzip","vzip","with_intents","with_token","DISCORD_API_URL","Error","Gateway","Generic","Result","Serde","ThreadSafeError","ThreadSafeResult","Tungstenite","borrow","borrow_mut","fmt","from","from","from","from","from","into","try_from","try_into","type_id","vzip","0","0","0","0","intents","route","gateway","timestamp","user","BANS","DIRECT_MESSAGES","DIRECT_MESSAGE_REACTIONS","DIRECT_MESSAGE_TYPING","Dispatch","EMOJIS","GUILDS","GUILD_BANS","GUILD_EMOJIS_AND_STICKERS","GUILD_INTEGRATIONS","GUILD_INVITES","GUILD_MEMBERS","GUILD_MESSAGES","GUILD_MESSAGE_REACTIONS","GUILD_MESSAGE_TYPING","GUILD_PRESENCES","GUILD_SCHEDULED_EVENTS","GUILD_VOICE_STATES","GUILD_WEBHOOKS","Heartbeat","HeartbeatAck","Hello","INTEGRATIONS","INVITES","Identify","Intents","InvalidSession","MEMBERS","MESSAGES","OpCode","PRESENCES","REACTIONS","Reconnect","RequestGuildMembers","Resume","SCHEDULED_EVENTS","STICKERS","StatusUpdate","TYPING","VOICE_STATES","VoiceStateUpdate","WEBHOOKS","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","complement","contains","deserialize","deserialize","difference","empty","eq","equivalent","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_int","from_iter","insert","int_value","intersection","intersects","into","into","is_all","is_empty","non_privileged","not","remove","serialize","serialize","set","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","vzip","vzip","Future","Past","RelativeTime","Timestamp","as_datetime","as_relative_time","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","elapsed","fmt","fmt","from","from","from","from_datetime","from_iso","from_snowflake","from_unix","into","into","timestamp_millis","timestamp_secs","to_owned","to_owned","to_secs_nanos","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","0","User","avatar_hash","borrow","borrow_mut","bot","created_at","discriminator","from","id","into","is_bot","name","tag","try_from","try_into","type_id","vzip","common","gateway","message","user","Snowflake","Dispatch","GetGatewayBotData","GetGatewayData","Heartbeat","HeartbeatAck","Hello","InvalidSession","Ready","Reconnect","SessionStartLimitData","WsDispatchEvent","WsInboundEvent","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","deserialize","deserialize","deserialize","deserialize","deserialize","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","max_concurrency","remaining","reset_after","serialize","serialize","serialize","serialize","serialize","session_start_limit","shards","to_owned","to_owned","to_owned","to_owned","to_owned","total","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","url","url","vzip","vzip","vzip","vzip","vzip","session_id","shard","user","v","0","0","0","0","1","MessageData","activity","application","application_id","attachments","author","borrow","borrow_mut","channel_id","clone","clone_into","components","content","deserialize","edited_timestamp","embeds","flags","fmt","from","guild_id","id","interaction","into","member","mention_channels","mention_everyone","mention_roles","mentions","message_reference","nonce","pinned","reactions","referenced_message","serialize","sticker_items","stickers","thread","timestamp","to_owned","try_from","try_into","tts","type","type_id","vzip","webhook_id","UserData","avatar","borrow","borrow_mut","bot","clone","clone_into","deserialize","discriminator","email","flags","fmt","from","id","into","locale","mfa_enabled","premium_type","public_flags","serialize","to_owned","try_from","try_into","type_id","username","verified","vzip"],"q":["rs_cord","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rs_cord::constants","rs_cord::error","","","","","","","","","","","","","","","","","","","","","rs_cord::error::Error","","","","rs_cord::macros","","rs_cord::models","","","rs_cord::models::gateway","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rs_cord::models::timestamp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rs_cord::models::timestamp::RelativeTime","","rs_cord::models::user","","","","","","","","","","","","","","","","","rs_cord::types","","","","rs_cord::types::common","rs_cord::types::gateway","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rs_cord::types::gateway::WsDispatchEvent","","","","rs_cord::types::gateway::WsInboundEvent","","","","","rs_cord::types::message","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rs_cord::types::user","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An authenticated client which will be able to interact …","Represents the state of the client.","","","","","A reference to the client serving this state.","","","","","","The client for Discord’s Gateway, or websocket API.","The HTTP Client being used.","The client for Discord’s RESTful API.  ","","The stored intent flags to use when connecting to the …","Aids in constructing a set of gateway intent bitflags.","","","","","Create a client with no configurations. You must …","Create a new client given an authentication token.","","Aids in helping constructing HTTP route endpoints.","Starts the client by authenticating via HTTP and …","Retrieves the current client state.","The current authentication token being used by the client. …","","","","","","","","The user the client is logged in to.","","","Sets the gateway intent flags to be used.","Set the authentication token to be used.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An alias for <code>Intents::GUILD_BANS</code>.","Enables all gateway events related to messages in direct …","Enables all gateway events related to message reactions in …","Enables all typing-related gateway events in direct …","An event was dispatched.","An alias for <code>Intents::GUILD_EMOJIS_AND_STICKERS</code>.","Enables all guild-related gateway events.","Enables all ban-related gateway events.","Enables all gateway events related to emojis and stickers.","Enables all gateway events related to guild integrations.","Enables all gateway events related to invites.","Enables all member-related gateway events.","Enables all gateway events related to messages in guilds …","Enables all gateway events related to message reactions in …","Enables all typing-related gateway events in guilds only.","Enables all gateway events related to member presences.","Enables all gateway events related to scheduled events.","Enables all gateway events related to voice states.","Enables all gateway events related to webhooks.","Fired periodically by the client to keep the connection …","Sent in response to receiving a heartbeat to acknowledge …","Sent immediately after connection - contains heartbeat and …","An alias for <code>Intents::GUILD_INTEGRATIONS</code>.","An alias for <code>Intents::GUILD_INVITES</code>.","Starts a new session during initial handshake.","A set of bitflags which represent what gateway events the …","Used to notify clients that their session ID is invalid.","An alias for <code>Intents::GUILD_MEMBERS</code>.","A shortcut for enabling both <code>Intents::GUILD_MESSAGES</code> and …","","An alias for <code>Intents::GUILD_PRESENCES</code>.","A shortcut for enabling both …","Used to tell clients to reconnect to the gateway.","Used to request guild members.","Resume a previous gateway session that was disconnected.","An alias for <code>Intents::GUILD_SCHEDULED_EVENTS</code>.","An alias for <code>Intents::GUILD_EMOJIS_AND_STICKERS</code>.","Update the client presence/status.","A shortcut for enabling both <code>Intents::GUILD_MESSAGE_TYPING</code> …","An alias for <code>Intents::GUILD_VOICE_STATES</code>.","Used to join, move, or leave voice channels.","An alias for <code>Intents::GUILD_WEBHOOKS</code>.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","The raw bits that represent the intent bitflag. This is …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Inserts the specified flags in-place.","","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Initializes a new set of intent flags that contain all …","Returns the complement of this set of flags.","Removes the specified flags in-place.","","","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","This timestamp is in the future.","This timestamp is in the past.","An enum to represent relative time.","Represents a timestamp which contains date and time.","The timestamp as a <code>chrono::DateTime</code>.","Returns a <code>RelativeTime</code> that represents how much time has …","","","","","","","","","Returns a <code>Duration</code> that represents how much time has …","","","","","","Creates a new timestamp from a <code>chrono::DateTime</code>.","Creates a new timestamp from an ISO 8601 timestamp.","Creates a new timestamp from a Discord snowflake.","Creates a new timestamp from a Unix timestamp in …","","","The amount of milliseconds since the Unix epoch.","The amount of seconds since the Unix epoch, as a whole …","","","Converts this timestamp into a tuple (seconds, …","","","","","","","","","","","Represents a Discord user.","The avatar hash of this user if this user has an avatar.","","","Whether or not this user is a bot account.","Returns a [<code>Timestamp</code>] of when this object was created.","The discriminator of this user. Note that this is always a …","","The snowflake ID of this user.","","Whether or not this user is a bot account.","The username of this user.","The Discord tag of this user, formatted in …","","","","","","","","","","An event was dispatched.","","","Fired periodically to keep the connection alive.","Sent in response to receiving a heartbeat to acknowledge …","Sent immediately after connecting.","The session has been invalidated.","","Request to reconnect to the gateway.","","","Represents an inbound gateway event.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,2,1,2,1,0,2,0,1,2,2,1,2,0,2,0,1,2,0,0,2,2,0,0,2,2,1,1,2,1,2,1,2,0,1,1,2,2,2,0,0,3,3,0,3,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,5,6,7,0,0,0,0,0,8,8,8,8,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,8,8,9,0,9,8,8,0,8,8,9,9,9,8,8,9,8,8,9,8,8,8,8,8,8,8,8,8,8,8,9,8,9,8,9,8,9,8,8,8,9,8,8,9,9,8,8,8,8,8,8,9,8,9,8,8,8,9,8,8,9,8,8,8,9,8,8,8,8,8,8,9,8,8,8,8,8,9,8,8,9,8,9,8,9,8,8,9,10,10,0,0,11,11,10,11,10,11,10,11,10,11,11,10,11,10,11,11,11,11,11,11,10,11,11,11,10,11,11,10,11,10,11,10,11,10,11,12,13,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,0,0,0,15,0,0,15,15,15,15,16,15,0,0,0,17,18,19,15,16,17,18,19,15,16,17,18,19,15,16,17,18,19,15,16,17,18,19,15,16,17,18,19,15,16,17,18,19,15,16,17,18,19,15,16,18,18,18,17,18,19,15,16,19,19,17,18,19,15,16,18,17,18,19,15,16,17,18,19,15,16,17,18,19,15,16,17,19,17,18,19,15,16,20,20,20,20,21,22,23,24,21,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26],"f":[null,null,[[]],[[]],[[]],[[]],null,null,[[]],null,[[]],[[]],null,null,null,null,null,null,[[]],[[]],null,null,[[]],[[]],null,null,[[]],[[],["clientstate",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["user",3]],[[]],[[]],[[["intents",3]]],[[]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[["formatter",3]],["result",6]],[[["threadsafeerror",6]]],[[["tungsteniteerror",4]],["error",4]],[[["str",15]]],[[]],[[["error",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[["intents",3]]],[[]],[[],["u32",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["intents",3]],[[],["opcode",4]],[[]],[[]],[[]],[[],["bool",15]],[[["deserializer",8]],["result",4]],[[],["result",4]],[[]],[[]],[[["opcode",4]],["bool",15]],[[],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u32",15]],["option",4]],[[["u32",15]]],[[["u32",15]]],[[],["result",4,[["intenumerror",3]]]],[[["intoiterator",8]]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["bool",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,null,[[],["datetime",3,[["utc",3]]]],[[],["relativetime",4]],[[]],[[]],[[]],[[]],[[],["relativetime",4]],[[],["timestamp",3]],[[]],[[]],[[],["duration",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["datetime",3,[["utc",3]]]]],[[]],[[["datetime",3,[["utc",3]]]]],[[["string",3]]],[[["u64",15]]],[[["u64",15]]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,[[]],[[]],null,[[],["timestamp",3]],null,[[]],null,[[]],[[],["bool",15]],null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["getgatewaydata",3]],[[],["sessionstartlimitdata",3]],[[],["getgatewaybotdata",3]],[[],["wsinboundevent",4]],[[],["wsdispatchevent",4]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["deserializer",8]],["result",4]],[[],["result",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[]],[[]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],null,[[],["messagedata",3]],[[]],null,null,[[],["result",4]],null,null,null,[[["formatter",3]],["result",6]],[[]],null,null,null,[[]],null,null,null,null,null,null,null,null,null,null,[[],["result",4]],null,null,null,null,[[]],[[],["result",4]],[[],["result",4]],null,null,[[],["typeid",3]],[[]],null,null,null,[[]],[[]],null,[[],["userdata",3]],[[]],[[],["result",4]],null,null,null,[[["formatter",3]],["result",6]],[[]],null,[[]],null,null,null,null,[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[]]],"p":[[3,"ClientState"],[3,"Client"],[4,"Error"],[13,"Generic"],[13,"Serde"],[13,"Tungstenite"],[13,"Gateway"],[3,"Intents"],[4,"OpCode"],[4,"RelativeTime"],[3,"Timestamp"],[13,"Past"],[13,"Future"],[3,"User"],[4,"WsInboundEvent"],[4,"WsDispatchEvent"],[3,"GetGatewayData"],[3,"SessionStartLimitData"],[3,"GetGatewayBotData"],[13,"Ready"],[13,"Dispatch"],[13,"Heartbeat"],[13,"InvalidSession"],[13,"Hello"],[3,"MessageData"],[3,"UserData"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};